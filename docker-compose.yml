version: "3"

volumes:
  mongodb_data_dev: { }
  postgres_data_dev: { }
  mongodb_data_dev1: { }
  mongodb_data_dev2: { }
  mongodb_data_dev3: { }
  elasticsearch:


services:
#  mongo1:
#    container_name: mongo1
#    hostname: mongo1
#    image: mongo:latest
#    volumes:
#      - mongodb_data_dev1:/data/db
#    restart: always
#    ports:
#      - "27017:27017"
#    command: mongod --replSet replication
##    environment:
##      MONGO_INITDB_ROOT_USERNAME: root
##      MONGO_INITDB_ROOT_PASSWORD: temppw
#
#  mongo2:
#    container_name: mongo2
#    hostname: mongo2
#    image: mongo:latest
#    volumes:
#      - mongodb_data_dev2:/data/db
#    restart: always
#    ports:
#      - "27018:27017"
#    command: mongod --replSet replication
#    depends_on:
#      - mongo1
#
#  mongo3:
#    container_name: mongo3
#    hostname: mongo3
#    image: mongo:latest
#    volumes:
#      - mongodb_data_dev3:/data/db
#    restart: always
#    ports:
#      - "27019:27017"
#    command: mongod --replSet replication
#    depends_on:
#      - mongo2
#
#  mongosetup:
#    image: "setup-rspl"
#    depends_on:
#      - mongo1
#
#  mongo-express:
#    image: mongo-express
#    restart: always
#    ports:
#      - "9018:8081"
#    environment:
#      ME_CONFIG_MONGODB_URL: mongodb://host.docker.internal:27017/
#    depends_on:
#      - mongo1

  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: "eg_user"
      POSTGRES_PASSWORD: "eg_pw"
      POSTGRES_DB: "eg_db"
    ports:
      - "5432:5432"

  #  redis:
  #    image: redis
  #    ports:
  #      - "6379:6379"

  backend:
    build:
      context: ./backend
      args:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: "*"
        DJANGO_CORS_ORIGIN_WHITELIST: "*"
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend/:/backend/
    expose:
      - 8000
    env_file:
      - ./settings/dev/.env.dev
#    depends_on:
#      - mongo
#      - redis

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "19100:9100"
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - "19093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "18081:8080"
    restart: always
    deploy:
      mode: global
      restart_policy:
          condition: on-failure

  prometheus:
    image: prom/prometheus:latest
    restart: always
    container_name: prometheus
    ports:
      - "19090:9090"
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    restart: always
    user: "472"
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "13001:3000"
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - grafana/config.monitoring

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: 7.16.3
#    image: elasticsearch:7.16.3
    restart: always
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: j2h2
      discovery.type: single-node

  kibana:
    container_name: kibana
    image: kibana:7.16.3
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
#
#  monstache:
#    container_name: monstache
#    restart: always
#    image: rwynn/monstache:6.7.4
#    command: -f ./monstache.config.toml &
#    volumes:
#      - ./elasticsearch/config/monstache.config.toml:/monstache.config.toml
#    depends_on:
#      - elasticsearch
#      - mongo1
#      - mongo2
#      - mongo3
#    links:
#      - elasticsearch
#    ports:
#      - "8080:8080"